package ycsb;

import brooklyn.config.ConfigKey;
import brooklyn.entity.Entity;
import brooklyn.entity.annotation.Effector;
import brooklyn.entity.annotation.EffectorParam;
import brooklyn.entity.basic.ConfigKeys;
import brooklyn.entity.group.DynamicCluster;
import brooklyn.entity.proxying.ImplementedBy;
import brooklyn.event.AttributeSensor;
import brooklyn.event.basic.Sensors;
import com.google.common.reflect.TypeToken;

import java.io.IOException;
import java.util.Collection;
import java.util.List;

/**
 * Created by zaid.mohsin on 16/12/2013.
 */
@ImplementedBy(YCSBEntityClusterImpl.class)
public interface YCSBEntityCluster extends DynamicCluster {


    AttributeSensor<List<String>> YCSB_CLUSTER_NODES = Sensors.newSensor(new TypeToken<List<String>>() {
    },
            "ycsbcluster.nodes", "List of hosts of all active ycsb nodes in the cluster (public hostname/IP)");
    ConfigKey<String> LOCAL_OUTPUT_PATH = ConfigKeys.newStringConfigKey("ycsbcluster.localOutputPath", "the path to fetch the output files to");
    ConfigKey<String> DB_TO_TEST = ConfigKeys.newStringConfigKey("ycsbcluster.db_to_test", "the name of the db to benchmark");

    @Override
    void setMembers(Collection<Entity> m);

    @Effector(description = "Load Workload in all YCSB clients")
    public void loadWorkloadForAll(@EffectorParam(name = "workload name") String workload) throws IOException;

    @Effector(description = "Run Workload in all YCSB clients")
    public void runWorkloadForAll(@EffectorParam(name = "workload name") String workload) throws IOException;

    @Effector(description = "Fetch the all output files generated by the tests")
    public void fetchOutputs();
}
